
name: Continuous Delivery

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    types:
      - completed

jobs:
  deploy_Env_Dev:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: akhileshns/heroku-deploy@v3.12.12 
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: "groupe1-dev"
          heroku_email: "gatien.boquet@gmail.com"
          healthcheck: "https://groupe1-dev.herokuapp.com"
          usedocker: true
          dontuseforce: 0


  deploy_Env_Stagging:
    runs-on: ubuntu-latest
    needs: [deploy_Env_Dev]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2 

      - name: Deploy in EC2 
        env:
            PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}
            HOSTNAME : ${{ secrets.HOSTNAME_STG  }}
            USER_NAME : ${{ secrets.USER_NAME  }}
            
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
            
            docker rm -f app_ib_groupe1_bdx
            echo "${{ secrets.TOKEN_REPO }}" | docker login ghcr.io -u $ --password-stdin
            docker pull ghcr.io/ib-groupe1-bdx/bdx-groupe-1:latest
            docker run -d -p 80:3000 --name app_ib_groupe1_bdx ghcr.io/ib-groupe1-bdx/bdx-groupe-1:latest
          '


  test_Env_Stagging:
    runs-on: ubuntu-latest
    needs: [deploy_Env_Stagging]
    env:
            HOSTNAME : ${{ secrets.HOSTNAME_STG  }}

    steps:
      - name: Checkout Env
        run: curl http://$HOSTNAME | grep -i "contact@eazytraining.fr"


  deploy_Env_Production:
    runs-on: ubuntu-latest
    needs: [test_Env_Stagging]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2 

      - name: Deploy in EC2 
        env:
            PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}
            HOSTNAME : ${{ secrets.HOSTNAME_PROD  }}
            USER_NAME : ${{ secrets.USER_NAME  }}
            
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
            
            docker rm -f app_ib_groupe1_bdx
            echo "${{ secrets.TOKEN_REPO }}" | docker login ghcr.io -u $ --password-stdin
            docker pull ghcr.io/ib-groupe1-bdx/bdx-groupe-1:latest
            docker run -d -p 80:3000 --name app_ib_groupe1_bdx ghcr.io/ib-groupe1-bdx/bdx-groupe-1:latest
          '


  test_Env_Production:
    runs-on: ubuntu-latest
    needs: [deploy_Env_Production]
    env:
            HOSTNAME : ${{ secrets.HOSTNAME_PROD  }}

    steps:
      - name: Checkout Env
        run: curl http://$HOSTNAME | grep -i "contact@eazytraining.fr"


  slack_Notification:
    name: Slack Notification
    runs-on: ubuntu-latest
    needs: [test_Env_Production]
    steps:
    - uses: edge/simple-slack-notify@master
      with:
        status: ${{ job.status }}
        success_text: '${env.GITHUB_WORKFLOW} (${env.GITHUB_RUN_NUMBER}) Deploy completed successfully'
        failure_text: '${env.GITHUB_WORKFLOW} (${env.GITHUB_RUN_NUMBER}) Deploy failed'
        cancelled_text: '${env.GITHUB_WORKFLOW} (${env.GITHUB_RUN_NUMBER}) Deploy was cancelled'
        fields: |
          [{ "title": "Repository", "value": "${env.GITHUB_REPOSITORY}", "short": true },
          { "title": "Branch", "value": "${env.GITHUB_REF_NAME}", "short": true }]
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}