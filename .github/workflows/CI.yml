name: Continuous Integration

on:
  # Cette action ne se lance que sur un push sur la branche marquée
  push:
    branches:
      - main
  # Cette action ne se lance que sur un pull request vers la branche marquée
  pull_request:
    branches:
      - main
  
jobs:
  test-frontend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.16]

    steps:
    # Recuperer le contenu de notre repository
    - name: Checkout repository
      uses: actions/checkout@v3

    # Installation de Node.js
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    # Verification du cache  
    - name: Verify the contents of the cache folder
      run: npm cache verify

    # Installation des dépendances   
    - name: Install dependencies
      run: npm install

    # Lancement du serveur node  
    - name: Launch node
      run: npm run build --if-present

    # Test Unitaire
    - name: Launch test
      run: npm test

  security:
    runs-on: ubuntu-latest
    needs: [test-frontend]
    if: ${{ github.event_name == 'push' && github.ref_name == 'main' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@master

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --sarif-file-output=snyk.sarif

    - name: Upload result to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: snyk.sarif

  lint-code-base:
    runs-on: ubuntu-latest
    needs: [test-frontend]

    steps:
    - name: Checkout repository
      uses: actions/checkout@master
      with:
        fetch-depth: 0

    - name: Lint Code Base
      uses: github/super-linter@v4
      env:
        VALIDATE_ALL_CODEBASE: false
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-image:
    runs-on: ubuntu-latest
    needs: [lint-code-base]
    if: ${{ github.event_name == 'push' && github.ref_name == 'main' }}

    env:
    # On utilise le github container registry
      REGISTRY: ghcr.io

    permissions:
      packages: write
      contents: read

    steps:
    # Recuperer le contenu de notre repository
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup Docker buildx
      uses: docker/setup-buildx-action@v1

    # Se connecter au github container registry
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Build de l'image puis push sur le github container registry
    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ghcr.io/${{ github.repository }}:latest

